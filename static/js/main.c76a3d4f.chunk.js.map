{"version":3,"sources":["customcomponents/Navbar.js","customcomponents/TextArea.js","customcomponents/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","cmode","role","htmlFor","TextArea","_useState","useState","_useState2","Object","slicedToArray","text","settext","wordcount","trim","split","length","words","console","log","_useState3","_useState4","btntext","setbtntext","_useState5","backgroundColor","color","_useState6","mystyle","setmystyle","Fragment","style","rows","value","onChange","event","target","upper","toUpperCase","lower","toLowerCase","converttext","forEach","element","charAt","slice","copied","navigator","clipboard","writeText","Alert","alert","Type","msg","data-bs-dismiss","defaultProps","drop1text","App","setmode","setalert","showAlert","message","setTimeout","homeLink","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c76a3d4f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            Navbar\r\n          </a>\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">\r\n            Navbar\r\n          </Link> */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href='/'>\r\n                  Home\r\n                </a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to='/'>\r\n                  Home\r\n                </Link> */}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/About\">\r\n                  About\r\n                  </a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to='/About'>\r\n                  About\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n                          {/* <!-- Default checked --> */}\r\n            <div className=\"form-check form-switch\">\r\n                <input className=\"form-check-input\" onClick={props.cmode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" />\r\n                <label className={`form-check-label text-${props.mode === 'light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckChecked\" >Change The Mode</label>\r\n            </div>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    drop1text :PropTypes.string \r\n}\r\n\r\nNavbar.defaultProps = {\r\n    drop1text : 'Default'\r\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function TextArea(props) {\r\n  \r\n    let onupperclick = function () {\r\n    console.log(\"onupperclick\");\r\n    let upper = text.toUpperCase();\r\n    settext(upper);\r\n  };\r\n\r\n  let onlowerclick = function () {\r\n    console.log(\"onlowerclick\");\r\n    let lower = text.toLowerCase();\r\n    settext(lower);\r\n  };\r\n\r\n  let onpascalclick = function () {\r\n    console.log(\"onpascalclick\");\r\n    let words = text.split(\" \");\r\n    let converttext='';\r\n    let Pascal='';\r\n    words.forEach(element =>{\r\n       converttext+= element.charAt(0).toUpperCase()+element.slice(1)+\" \";\r\n    });\r\n    Pascal = converttext; \r\n    settext(Pascal);\r\n  };\r\n\r\n  let onclearclick = function () {\r\n    console.log(\"onclrearclick\");\r\n    // let upper = text.toLowerCase();\r\n    settext(\"\");\r\n  };\r\n  \r\n  let onchange = (event) => {\r\n    settext(event.target.value);\r\n    console.log(event.target.value);\r\n    // console.log('Text Is Changed');\r\n  };\r\n\r\n  let copytext = (event) =>{\r\n    let copied = text;\r\n    navigator.clipboard.writeText(copied); \r\n  }\r\n//   let \r\n  let [text, settext] = useState(\"\");\r\n  // let word1 = text.endsWith(' ').next\r\n  let wordcount = text.trim().split(\" \").length;\r\n  let words = text.trim().split(\" \");\r\n  // if (wordcount == 1 && text.endsWith(\" \").nextWord == undefined) {\r\n  //     wordcount = 0;\r\n  // }\r\n  console.log(words);\r\n  \r\n  // console.log(text.nextWord);\r\n  // Array.from(text).forEach(element=>{\r\n  //   if (element == ) {\r\n      \r\n  //   }\r\n  // })\r\n  // if (wordcount == 1 && text.nextWord == undefined) {\r\n  //   wordcount = 0;\r\n  // }\r\n  // else{\r\n  //   wordcount = text.trim().split(\" \").length;\r\n  // }\r\n  \r\n  console.log(wordcount);\r\n  \r\n  // if (text.next == \" \" && text.next.next == \" \") {\r\n  //   wordcount = wordcount-1;\r\n  // }\r\n  // console.log(text.nextWord);\r\n  \r\n  let [btntext,setbtntext] = useState('Light Mode');\r\n  let [mystyle, setmystyle] = useState({backgroundColor:'black',\r\n  color: 'white'});\r\n  let changemode = ()=>{\r\n    if (mystyle.color == 'white') {\r\n        setmystyle({\r\n            backgroundColor : 'white',\r\n            color : 'black'\r\n        })\r\n        setbtntext('Dark Mode');\r\n    }\r\n    else{\r\n        setmystyle({\r\n            backgroundColor : 'black',\r\n            color : 'white'\r\n        })\r\n        setbtntext('Light Mode');\r\n    }\r\n  }\r\n  // text = 'Enter Your new text';\r\n  return (\r\n    <>\r\n      <div style={mystyle}>\r\n        <div className=\"form-floating my-3\" style={mystyle}>\r\n            <textarea style={mystyle}\r\n                className=\"form-control\"\r\n                // placeholder=\"Leave a comment here\"\r\n                id=\"floatingTextarea\"\r\n                rows=\"19\"\r\n                value={text}\r\n                onChange={onchange}>\r\n            </textarea>\r\n            <button className=\"btn btn-primary my-3\" onClick={onupperclick}>\r\n                Convert To UpeerCase\r\n            </button>\r\n            <button className=\"btn btn-primary my-3 mx-3\" onClick={onlowerclick}>\r\n                Convert To LowerCase\r\n            </button>\r\n            <button className=\"btn btn-primary my-3 mx-3\" onClick={onpascalclick}>\r\n                Convert To PascalCase\r\n            </button>\r\n            <button className=\"btn btn-primary my-3 mx-3\" onClick={onclearclick}>\r\n                Clear The Text\r\n            </button>\r\n            <button onClick={changemode} className='btn btn-dark my-3 mx-3' type='button'> {btntext}\r\n            </button>\r\n            <button onClick={copytext} className='btn btn-dark my-3 mx-3' type='button'> Copy Text \r\n            </button>\r\n            {/* <label htmlFor=\"floatingTextarea\">{props.heading}</label> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3 border border-2\" style={mystyle} >\r\n            <h1>Your Text Summarry</h1>\r\n            <p> Your Text Has {wordcount} Words And {text.length} Characters</p>\r\n            <p> Your Text Would Take {wordcount*0.08} Minutes</p>\r\n            {/* <p>{wordcount}</p> */}\r\n            <h1>Preview</h1>\r\n            <p> {text.length>0?text:'Enter A Text'} </p>\r\n            {/* <p> Your Pascal Is: {text} </p> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextArea.propTypes = {\r\n  heading: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && \r\n      <div\r\n        className={`alert alert-${props.alert.Type} alert-dismissible fade show`} role=\"alert\" >\r\n        {/* className={`alert alert-success alert-dismissible fade show`} role=\"alert\" > */}\r\n        <strong>{props.alert.msg}</strong>\r\n        {/* <strong>Success</strong> */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    \r\n  );\r\n}\r\n\r\n","import \"./App.css\";\nimport Navbar from \"./customcomponents/Navbar\";\nimport TextArea from \"./customcomponents/TextArea\";\nimport React, { useState } from \"react\";\nimport Alert from \"./customcomponents/Alert\";\nimport About from \"./customcomponents/About\";\n// import { BrowserRouter as Router, Route, Link,Routes} from \"react-router-dom\";\nimport { BrowserRouter,Routes,Route } from \"react-router-dom\";\n// import Darkmode from \"./customcomponents/Darkmode\";\n\n// let marks = 10;\nfunction App() {\n  let [mode, setmode] = useState(\"dark\");\n  let [alert, setalert] = useState(null);\n  // Alert Box\n  // const [alert1,setAlert] = useState(null);\n  let showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      Type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n    // console.log(alert.msg);\n    // console.log(alert.Type);\n  };\n\n  // CHange The Mode\n  let Chmode = () => {\n    if (mode === \"light\") {\n      // document.body.style.backgroundColor = 'black';\n      setmode(\"dark\");\n      console.log(\"converting to Dark\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark Mode Is Enabled\", \"success\");\n    } else {\n      // document.body.style.backgroundColor = 'white';\n      setmode(\"light\");\n      console.log(\"converting to Light\");\n      document.body.style.backgroundColor = \"skyblue\";\n      showAlert(\"Light Mode Is Enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n    {/* <BrowserRouter> */}\n\n      {/* <Navbar homeLink='https://www.youtube.com/' drop1text='drop1' /> */}\n      <Navbar homeLink=\"home\" drop1text=\"drop2\" cmode={Chmode} mode={mode} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        {/* renders the first one that matches the current URL. */}\n            <TextArea />\n        {/* <Routes> */}\n          {/* <Route path=\"/About\" element={<About cmode={Chmode} mode={mode}/>}> */}\n          {/* </Route> */}\n          {/* <Route path=\"\" element={<TextArea />}> */}\n          {/* </Route> */}\n        {/* </Routes> */}\n      </div>\n    {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}